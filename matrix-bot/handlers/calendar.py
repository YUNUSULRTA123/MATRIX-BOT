import json
import os
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

EVENTS_FILE = "data/events.json"

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("data", exist_ok=True)
if not os.path.exists(EVENTS_FILE):
    with open(EVENTS_FILE, "w", encoding="utf-8") as f:
        json.dump([], f)

# –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
async def addevent_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 3:
            await update.message.reply_text(
    "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
    "/addevent <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
    "üß† –ü—Ä–∏–º–µ—Ä:\n"
    "/addevent 20.07.2025 14:00 –í—Å—Ç—Ä–µ—á–∞ —Å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º"
)

            return

        date_str = args[0]
        time_str = args[1]
        description = " ".join(args[2:])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        dt_str = f"{date_str} {time_str}"
        dt = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")

        event = {
            "timestamp": dt.timestamp(),
            "date": date_str,
            "time": time_str,
            "description": description
        }

        with open(EVENTS_FILE, "r+", encoding="utf-8") as f:
            events = json.load(f)
            events.append(event)
            f.seek(0)
            json.dump(events, f, indent=2, ensure_ascii=False)
            f.truncate()

        await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {description} ({date_str} –≤ {time_str})")

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /addevent 16.07.2025 14:30 –°–æ–±—Ä–∞–Ω–∏–µ")

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
async def events_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(EVENTS_FILE, "r", encoding="utf-8") as f:
            events = json.load(f)

        if not events:
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        events.sort(key=lambda x: x["timestamp"])
        now = datetime.now().timestamp()

        message = "üìÖ –¢–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è:\n"
        for e in events:
            # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
            if e["timestamp"] >= now:
                message += f"‚Ä¢ {e['date']} –≤ {e['time']} ‚Äî {e['description']}\n"

        await update.message.reply_text(message if message.strip() else "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
