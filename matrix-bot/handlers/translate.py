import aiohttp
import logging

logger = logging.getLogger(__name__)

LANGUAGES = {
    "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "ru": "–†—É—Å—Å–∫–∏–π",
    "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
    "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
    "de": "–ù–µ–º–µ—Ü–∫–∏–π",
    "it": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
    "tr": "–¢—É—Ä–µ—Ü–∫–∏–π",
    "zh": "–ö–∏—Ç–∞–π—Å–∫–∏–π",
    "ja": "–Ø–ø–æ–Ω—Å–∫–∏–π"
}

def get_supported_languages():
    return "\n".join([f"{code} ‚Äî {name}" for code, name in LANGUAGES.items()])

async def translate_handler(update, context):
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç: /translate <—è–∑—ã–∫> <—Ç–µ–∫—Å—Ç>\n"
            "–ü—Ä–∏–º–µ—Ä: /translate en –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\n\n"
            "üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n" +
            get_supported_languages()
        )
        return

    target_lang = context.args[0].lower()
    if target_lang not in LANGUAGES:
        await update.message.reply_text(
            f"‚ö†Ô∏è –Ø–∑—ã–∫ '{target_lang}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n" + get_supported_languages()
        )
        return

    text = " ".join(context.args[1:])
    url = "https://translate.astian.org/translate"
    payload = {
        "q": text,
        "source": "auto",
        "target": target_lang,
        "format": "text"
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=payload, headers=headers, timeout=10) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"API error: {response.status} ‚Äî {error_text}")
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status}.\n"
                        f"{error_text[:300]}"
                    )
                    return

                result = await response.json()
                translated = result.get("translatedText")

                if translated:
                    await update.message.reply_text(f"üì§ –ü–µ—Ä–µ–≤–æ–¥: {translated}")
                else:
                    logger.warning(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç: {result}")
                    await update.message.reply_text("‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–µ—Ä–µ–≤–æ–¥–∞:\n{e}")
